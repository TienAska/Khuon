#version 450
#extension GL_NV_mesh_shader : require

layout(local_size_x = 12) in;
layout(triangles, max_vertices = 8, max_primitives = 12) out;
 
//-------------------------------------
// transform_ub: Uniform buffer for transformations
//
layout (std140, binding = 0) uniform uniforms_t
{ 
  mat4 ViewProjectionMatrix;
  mat4 ModelMatrix;
};

// Custom vertex output block
layout (location = 0) out PerVertexData
{
  vec3 uvw;
} vertex_out[];  // [max_vertices]
 
 
void main()
{
    const vec3 vertices[] = {
        vec3( 1.0,  1.0,  1.0), // 0
        vec3( 1.0, -1.0,  1.0), // 1
        vec3( 1.0, -1.0, -1.0), // 2
        vec3( 1.0,  1.0, -1.0), // 3

        vec3(-1.0,  1.0, -1.0), // 4
        vec3(-1.0, -1.0, -1.0), // 5
        vec3(-1.0, -1.0,  1.0), // 6
        vec3(-1.0,  1.0,  1.0), // 7
    };


    const uint indices[] = {
        2, 1, 0, 2, 0, 3, // +x
        7, 6, 5, 7, 5, 4, // -x
        7, 4, 3, 7, 3, 0, // +y
        5, 6, 1, 5, 1, 2, // -y
        0, 1, 6, 0, 6, 7, // +z
        4, 5, 2, 4, 2, 3, // -z
    };

    // Vertices
    for(uint i = 0; i < 8; ++i)
    {
        vec4 position = vec4(vertices[i], 1.0);
        gl_MeshVerticesNV[i].gl_Position =  (ViewProjectionMatrix * ModelMatrix * position).xyww;
        vertex_out[i].uvw = vertices[i];
    }

    // Indices
    uint thread_id = gl_LocalInvocationID.x;
    gl_PrimitiveIndicesNV[thread_id * 3 + 0] = indices[thread_id * 3 + 0];
    gl_PrimitiveIndicesNV[thread_id * 3 + 1] = indices[thread_id * 3 + 1];
    gl_PrimitiveIndicesNV[thread_id * 3 + 2] = indices[thread_id * 3 + 2];

    gl_PrimitiveCountNV = 12;
 }