#version 450
 
#extension GL_NV_mesh_shader : require
 
layout(local_size_x = 1) in;
layout(lines, max_vertices = 128, max_primitives = 127) out;
 
//-------------------------------------
// transform_ub: Uniform buffer for transformations
//
layout (std140, binding = 0) uniform uniforms_t
{ 
  mat4 ViewProjectionMatrix;
  mat4 ModelMatrix;
  vec3 CameraPosition;
  float padding;
} transform_ub;
 
//-------------------------------------
// vb: storage buffer for vertices.
//
 
layout (std430, binding = 0) buffer _vertices
{
  float positions[];
} vb;

layout (location = 0) uniform vec4 color;

//-------------------------------------
// mbuf: storage buffer for meshlets.
//
struct s_meshlet
{
  uint vertex_offset;
  uint vertex_count;
  uint index_offset;
  uint index_count;
};
 
layout (std430, binding = 1) buffer _meshlets
{
  s_meshlet meshlets[];
} mbuf;
 
// Mesh shader output block.
//
layout (location = 0) out PerVertexData
{
  vec4 color;
  vec3 viewDirWS;
  vec3 tangentWS;
} v_out[];   // [max_vertices]
 
// Color table for drawing each meshlet with a different color.
//
#define MAX_COLORS 10
vec3 meshletcolors[MAX_COLORS] = {
  vec3(1,0,0), 
  vec3(0,1,0),
  vec3(0,0,1),
  vec3(1,1,0),
  vec3(1,0,1),
  vec3(0,1,1),
  vec3(1,0.5,0),
  vec3(0.5,1,0),
  vec3(0,0.5,1),
  vec3(1,1,1)
  };
 

vec4 GetPosition(uint vi)
{
    return vec4(vb.positions[vi * 3], vb.positions[vi * 3 + 1], vb.positions[vi * 3 + 2], 1.0);
}

void main()
{
  uint mi = gl_WorkGroupID.x;
  uint thread_id = gl_LocalInvocationID.x;
 
  uint vertex_offset = mbuf.meshlets[mi].vertex_offset;
  uint vertex_count  = mbuf.meshlets[mi].vertex_count;
  for (uint i = 0; i < vertex_count; ++i)
  {
    uint vi = vertex_offset + i;
    vec4 positionWS = transform_ub.ModelMatrix * GetPosition(vi);
    gl_MeshVerticesNV[i].gl_Position = transform_ub.ViewProjectionMatrix * positionWS;
//    v_out[i].color = vec4(meshletcolors[mi%MAX_COLORS], 1.0) * (1.0 - float(i) / vertex_count);
    v_out[i].color = color;
    v_out[i].viewDirWS = transform_ub.CameraPosition - positionWS.xyz;
    
    if(i == 0)
    {
        v_out[i].tangentWS = vec3(0.0);
        gl_PrimitiveCountNV = 0;
    }
    else
    {
        v_out[i].tangentWS = positionWS.xyz - (transform_ub.ModelMatrix * GetPosition(vi - 1)).xyz;
        gl_PrimitiveIndicesNV[(i - 1) * 2] = i - 1;
        gl_PrimitiveIndicesNV[(i - 1) * 2 + 1] = i;
        gl_PrimitiveCountNV++;
    }
  }
}